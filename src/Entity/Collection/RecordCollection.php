<?php

declare(strict_types=1);

namespace App\Entity\Collection;

use ApiPlatform\Metadata\ApiResource;
use ApiPlatform\Metadata\Delete;
use ApiPlatform\Metadata\Get;
use ApiPlatform\Metadata\GetCollection;
use ApiPlatform\Metadata\Link;
use ApiPlatform\Metadata\Post;
use ApiPlatform\Metadata\Put;
use App\Entity\BlameableEntity;
use App\Entity\CommonProperties;
use App\Repository\Collection\RecordCollectionRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use Gedmo\Timestampable\Traits\TimestampableEntity;
use Symfony\Component\Serializer\Attribute\Groups;
use Symfony\Component\Validator\Constraints as Assert;

#[ApiResource(
    operations: [
        new GetCollection(
            uriTemplate: '/internal/record_collections',
            security: "is_granted('ROLE_ADMIN')",
        ),
        new Get(
            uriTemplate: '/internal/record_collections/{id}/records',
            normalizationContext: ['groups' => ['record:list']],
            security: "is_granted('ROLE_ADMIN')",
        ),
        new Post(
            uriTemplate: '/internal/record_collections',
            security: "is_granted('ROLE_ADMIN')",
        ),
        new Put(
            uriTemplate: '/internal/record_collections/{id}',
            security: "is_granted('ROLE_ADMIN')",
        ),
        new Delete(
            uriTemplate: '/internal/record_collections/{id}',
            security: "is_granted('ROLE_ADMIN')",
        ),
    ],
    normalizationContext: ['groups' => ['record_collection:read']],
    denormalizationContext: ['groups' => ['record_collection:write']],
)]
#[ORM\Entity(repositoryClass: RecordCollectionRepository::class)]
class RecordCollection
{
    use BlameableEntity;
    use CommonProperties\Required\AutoGeneratedId;
    use CommonProperties\Required\Name;
    use TimestampableEntity;

    #[Groups([
        'record_collection:read',
    ])]
    #[Gedmo\Slug(fields: ['name'], updatable: false)]
    #[ORM\Column(length: 255, nullable: true)]
    private ?string $slug = null;

    /**
     * @var Collection<int, Record>
     */
    #[Groups([
        'record:list',
        'public:record:list',
    ])]
    #[ORM\OneToMany(targetEntity: Record::class, mappedBy: 'collection', orphanRemoval: true)]
    private Collection $records;

    /**
     * @var Collection<int, Field>
     */
    #[Assert\Valid]
    #[Link(toProperty: 'collection')]
    #[Groups([
        'record_collection:read',
        'record_collection:write',
    ])]
    #[ORM\OneToMany(
        targetEntity: Field::class,
        mappedBy: 'recordCollection',
        cascade: ['persist'],
        orphanRemoval: true,
    )]
    private Collection $fields;

    public function __construct()
    {
        $this->records = new ArrayCollection();
        $this->fields = new ArrayCollection();
    }

    public function __toString(): string
    {
        return $this->name;
    }

    #[Groups([
        'record_collection:read',
    ])]
    public function getId(): ?int
    {
        return $this->id;
    }

    #[Groups([
        'record_collection:read',
    ])]
    public function getName(): ?string
    {
        return $this->name;
    }

    #[Groups([
        'record_collection:write',
    ])]
    public function setName(string $name): self
    {
        $this->name = $name;

        return $this;
    }

    public function getSlug(): ?string
    {
        return $this->slug;
    }

    public function setSlug(string $slug): static
    {
        $this->slug = $slug;

        return $this;
    }

    /**
     * @return Collection<int, Record>
     */
    public function getRecords(): Collection
    {
        return $this->records;
    }

    /**
     * @return Collection<int, Record>
     */
    public function getPublishedRecords(): Collection
    {
        return $this->records->filter(
            static fn (Record $record) => $record->isPublished()
        );
    }

    public function addRecord(Record $record): static
    {
        if (!$this->records->contains($record)) {
            $this->records->add($record);
            $record->setCollection($this);
        }

        return $this;
    }

    public function removeRecord(Record $record): static
    {
        if ($this->records->removeElement($record)) {
            // set the owning side to null (unless already changed)
            if ($record->getCollection() === $this) {
                $record->setCollection(null);
            }
        }

        return $this;
    }

    /**
     * @return Collection<int, Field>
     */
    public function getFields(): Collection
    {
        return $this->fields;
    }

    public function addField(Field $field): static
    {
        if (!$this->fields->contains($field)) {
            $this->fields->add($field);
            $field->setRecordCollection($this);
        }

        return $this;
    }

    public function removeField(Field $field): static
    {
        if ($this->fields->removeElement($field)) {
            // set the owning side to null (unless already changed)
            if ($field->getRecordCollection() === $this) {
                $field->setRecordCollection(null);
            }
        }

        return $this;
    }
}
