<?php

declare(strict_types=1);

namespace App\Entity\Page;

use ApiPlatform\Metadata\ApiResource;
use ApiPlatform\Metadata\Get;
use ApiPlatform\Metadata\GetCollection;
use App\Entity\BlameableEntity;
use App\Entity\CommonProperties;
use App\Pro\Entity\Collection\RecordCollection;
use App\Repository\Page\PageRepository;
use App\State\PublishedPageProvider;
use App\Validator\UniqueHomepage;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use Gedmo\Timestampable\Traits\TimestampableEntity;
use Symfony\Component\Serializer\Attribute\Groups;
use Symfony\Component\Serializer\Attribute\SerializedName;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Context\ExecutionContextInterface;

#[ApiResource(
    operations: [
        new Get(),
        new Get(
            uriTemplate: '/public/pages/{id}',
            normalizationContext: ['groups' => ['public:page:read']],
            security: 'is_granted("PUBLIC_ACCESS")',
            provider: PublishedPageProvider::class,
        ),
        new GetCollection(),
        new GetCollection(
            uriTemplate: '/public/pages',
            normalizationContext: ['groups' => ['public:page:list']],
            security: 'is_granted("PUBLIC_ACCESS")',
            provider: PublishedPageProvider::class,
        ),
    ]
)]
#[ORM\Entity(repositoryClass: PageRepository::class)]
#[ORM\Index(columns: ['slug'])]
#[Gedmo\Loggable(logEntryClass: PageLogEntry::class)]
#[UniqueHomepage]
class Page
{
    use BlameableEntity;
    use CommonProperties\MetaRobots;
    use CommonProperties\Required\AutoGeneratedId;
    use CommonProperties\Required\Enabled;
    use CommonProperties\Required\Name;
    use CommonProperties\Required\Published;
    use CommonProperties\Seo;
    use TimestampableEntity;
    private const TEMPLATES_DIR = __DIR__.'/../../../templates/';

    #[Groups([
        'public:page:read',
        'public:page:list',
    ])]
    #[Assert\NotBlank]
    #[Gedmo\Versioned]
    #[ORM\Column(length: 255)]
    private ?string $title = null;

    #[Groups([
        'public:page:read',
        'public:page:list',
    ])]
    #[Gedmo\Slug(fields: ['title'], updatable: false)]
    #[Gedmo\Versioned]
    #[ORM\Column(length: 255, nullable: true)]
    private ?string $slug = null;

    #[Gedmo\Versioned]
    #[ORM\Column(type: Types::TEXT, nullable: true)]
    private ?string $content = null;

    #[ORM\Column(length: 255, nullable: true)]
    private ?string $template = null;

    #[Groups([
        'public:page:read',
        'public:page:list',
    ])]
    #[Gedmo\Versioned]
    #[ORM\Column(options: ['default' => false])]
    private bool $homepage = false;

    /*
     * The record collections this page is linked to.
     * This is used to display the records in the page.
     *
     * This is a pro feature.
     */
    /**
     * @var Collection<int, RecordCollection>
     */
    #[ORM\ManyToMany(targetEntity: RecordCollection::class)]
    private Collection $recordCollections;

    public function __construct()
    {
        $this->recordCollections = new ArrayCollection();
    }

    #[Groups([
        'public:page:read',
        'public:page:list',
    ])]
    public function getId(): ?int
    {
        return $this->id;
    }

    public function getTitle(): ?string
    {
        return $this->title;
    }

    public function setTitle(?string $title): static
    {
        $this->title = $title;

        return $this;
    }

    public function getContent(): ?string
    {
        return $this->content;
    }

    #[SerializedName('content')]
    #[Groups([
        'public:page:read',
    ])]
    public function getHtmlContent(): ?string
    {
        if (!empty($this->getTemplate()) && file_exists(self::TEMPLATES_DIR.$this->getTemplate())) {
            if (class_exists(\Twig\Environment::class)) {
                $twig = new \Twig\Environment(new \Twig\Loader\FilesystemLoader(self::TEMPLATES_DIR));

                try {
                    return $twig->render($this->getTemplate(), [
                        'page' => $this,
                    ]);
                } catch (\Throwable $t) {
                    throw new \RuntimeException('Twig template rendering failed (probably because you use a function unavailable in twig with Fastfony pages): '.$t->getMessage());
                }
            }

            throw new \RuntimeException('Twig is unavailable.');
        }

        return $this->content;
    }

    public function setContent(?string $content): static
    {
        $this->content = $content;

        return $this;
    }

    public function getTemplate(): ?string
    {
        return $this->template;
    }

    public function setTemplate(?string $template): static
    {
        $this->template = $template;

        return $this;
    }

    public function getSlug(): ?string
    {
        return $this->slug;
    }

    public function setSlug(?string $slug): static
    {
        $this->slug = $slug;

        return $this;
    }

    public function isHomepage(): bool
    {
        return $this->homepage;
    }

    public function setHomepage(bool $homepage): static
    {
        $this->homepage = $homepage;

        return $this;
    }

    /**
     * @return Collection<int, RecordCollection>
     */
    public function getRecordCollections(): Collection
    {
        return $this->recordCollections;
    }

    #[SerializedName('collections')]
    #[Groups([
        'public:page:read',
    ])]
    public function getRecordCollectionsAsArrayWithPublishedRecords(): array
    {
        $collections = [];
        foreach ($this->getRecordCollections() as $recordCollection) {
            $collections[$recordCollection->getSlug()] = $recordCollection->getPublishedRecords();
        }

        return $collections;
    }

    public function addRecordCollection(RecordCollection $recordCollection): static
    {
        if (!$this->recordCollections->contains($recordCollection)) {
            $this->recordCollections->add($recordCollection);
        }

        return $this;
    }

    public function removeRecordCollection(RecordCollection $recordCollection): static
    {
        $this->recordCollections->removeElement($recordCollection);

        return $this;
    }

    #[Assert\Callback]
    public function validateContentOrTemplate(ExecutionContextInterface $context): void
    {
        if (!empty($this->content) && !empty($this->template)) {
            $context->buildViolation('You cannot enter “prose content” and “template path” at the same time.')
                ->atPath('template')
                ->addViolation();
        }

        if (!empty($this->template)) {
            $templatePath = self::TEMPLATES_DIR.$this->template;
            if (!file_exists($templatePath)) {
                $context->buildViolation('The template file does not exist.')
                    ->atPath('template')
                    ->addViolation();
            }
        }
    }
}
