<?php

declare(strict_types=1);

namespace App\Entity\Page;

use ApiPlatform\Metadata\ApiResource;
use ApiPlatform\Metadata\Get;
use ApiPlatform\Metadata\GetCollection;
use App\Entity\BlameableEntity;
use App\Entity\CommonProperties;
use App\Repository\Page\PageRepository;
use App\State\PublishedPageProvider;
use App\Validator\UniqueHomepage;
use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use Gedmo\Timestampable\Traits\TimestampableEntity;
use Symfony\Component\Serializer\Attribute\Groups;
use Symfony\Component\Validator\Constraints as Assert;

#[ApiResource(
    operations: [
        new Get(),
        new Get(
            uriTemplate: '/public/pages/{id}',
            normalizationContext: ['groups' => ['public:page:read']],
            security: 'is_granted("PUBLIC_ACCESS")',
            provider: PublishedPageProvider::class,
        ),
        new GetCollection(),
        new GetCollection(
            uriTemplate: '/public/pages',
            normalizationContext: ['groups' => ['public:page:list']],
            security: 'is_granted("PUBLIC_ACCESS")',
            provider: PublishedPageProvider::class,
        ),
    ]
)]
#[ORM\Entity(repositoryClass: PageRepository::class)]
#[ORM\Index(columns: ['slug'])]
#[Gedmo\Loggable(logEntryClass: PageLogEntry::class)]
#[UniqueHomepage]
class Page
{
    use BlameableEntity;
    use CommonProperties\MetaRobots;
    use CommonProperties\Required\AutoGeneratedId;
    use CommonProperties\Required\Enabled;
    use CommonProperties\Required\Name;
    use CommonProperties\Required\Published;
    use CommonProperties\Seo;
    use TimestampableEntity;

    #[Groups([
        'public:page:read',
        'public:page:list',
    ])]
    #[Assert\NotBlank]
    #[Gedmo\Versioned]
    #[ORM\Column(length: 255)]
    private ?string $title = null;

    #[Groups([
        'public:page:read',
        'public:page:list',
    ])]
    #[Gedmo\Slug(fields: ['title'], updatable: false)]
    #[Gedmo\Versioned]
    #[ORM\Column(length: 255, nullable: true)]
    private ?string $slug = null;

    #[Groups([
        'public:page:read',
    ])]
    #[Gedmo\Versioned]
    #[ORM\Column(nullable: true)]
    private ?string $content = null;

    #[Groups([
        'public:page:read',
        'public:page:list',
    ])]
    #[Gedmo\Versioned]
    #[ORM\Column(options: ['default' => false])]
    private bool $homepage = false;

    #[Groups([
        'public:page:read',
        'public:page:list',
    ])]
    public function getId(): ?int
    {
        return $this->id;
    }

    public function getTitle(): ?string
    {
        return $this->title;
    }

    public function setTitle(?string $title): static
    {
        $this->title = $title;

        return $this;
    }

    public function getContent(): ?string
    {
        return $this->content;
    }

    public function setContent(?string $content): static
    {
        $this->content = $content;

        return $this;
    }

    public function getSlug(): ?string
    {
        return $this->slug;
    }

    public function setSlug(?string $slug): static
    {
        $this->slug = $slug;

        return $this;
    }

    public function isHomepage(): bool
    {
        return $this->homepage;
    }

    public function setHomepage(bool $homepage): static
    {
        $this->homepage = $homepage;

        return $this;
    }
}
