<?php

namespace App\Pro\Entity\Collection;

use App\Entity\BlameableEntity;
use App\Entity\CommonProperties;
use App\Pro\Repository\Collection\FieldRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;
use Gedmo\Timestampable\Traits\TimestampableEntity;

#[ORM\Entity(repositoryClass: FieldRepository::class)]
class Field
{
    use BlameableEntity;
    use CommonProperties\Required\AutoGeneratedId;
    use TimestampableEntity;

    #[ORM\Column(length: 255)]
    private ?string $type = null;

    #[ORM\Column(type: Types::JSON)]
    private array $parameters = [];

    #[ORM\Column]
    private ?bool $hidden = null;

    #[ORM\Column]
    private ?bool $nonempty = null;

    #[ORM\ManyToOne(inversedBy: 'fields')]
    #[ORM\JoinColumn(nullable: false)]
    private ?RecordCollection $recordCollection = null;

    public function getType(): ?string
    {
        return $this->type;
    }

    public function setType(string $type): static
    {
        $this->type = $type;

        return $this;
    }

    public function getParameters(): array
    {
        return $this->parameters;
    }

    public function setParameters(array $parameters): static
    {
        $this->parameters = $parameters;

        return $this;
    }

    public function isHidden(): ?bool
    {
        return $this->hidden;
    }

    public function setHidden(bool $hidden): static
    {
        $this->hidden = $hidden;

        return $this;
    }

    public function isNonempty(): ?bool
    {
        return $this->nonempty;
    }

    public function setNonempty(bool $nonempty): static
    {
        $this->nonempty = $nonempty;

        return $this;
    }

    public function getRecordCollection(): ?RecordCollection
    {
        return $this->recordCollection;
    }

    public function setRecordCollection(?RecordCollection $recordCollection): static
    {
        $this->recordCollection = $recordCollection;

        return $this;
    }
}
